package malware_protection

import (
	"context"
	"fmt"
	"net/http"

	"github.com/SecurityGeekIO/zscaler-sdk-go/v3/zscaler"
)

const (
	atpMalwareInspectionEndpoint         = "/zia/api/v1/atpMalwareInspection"
	atpMalwareProtectionProtocolEndpoint = "/zia/api/v1/atpMalwareProtocols"
	malwarePolicyEndpoint                = "/zia/api/v1/malwarePolicy"
	malwareSettingsEndpoint              = "/zia/api/v1/malwareSettings"
)

// Malware Inspection
type ATPMalwareInspection struct {
	InspectInbound  bool `json:"inspectInbound"`
	InspectOutbound bool `json:"inspectOutbound"`
}

// Malware Protocols
type ATPMalwareProtocols struct {
	InspectHttp        bool `json:"inspectHttp"`
	InspectFtpOverHttp bool `json:"inspectFtpOverHttp"`
	InspectFtp         bool `json:"inspectFtp"`
}

// Malware Policy
type MalwarePolicy struct {
	BlockUnscannableFiles              bool `json:"blockUnscannableFiles"`
	BlockPasswordProtectedArchiveFiles bool `json:"blockPasswordProtectedArchiveFiles"`
}

// Malware Settings
type MalwareSettings struct {
	VirusBlocked                bool `json:"virusBlocked"`
	VirusCapture                bool `json:"virusCapture"`
	UnwantedApplicationsBlocked bool `json:"unwantedApplicationsBlocked"`
	UnwantedApplicationsCapture bool `json:"unwantedApplicationsCapture"`
	TrojanBlocked               bool `json:"trojanBlocked"`
	TrojanCapture               bool `json:"trojanCapture"`
	WormBlocked                 bool `json:"wormBlocked"`
	WormCapture                 bool `json:"wormCapture"`
	AdwareBlocked               bool `json:"adwareBlocked"`
	AdwareCapture               bool `json:"adwareCapture"`
	SpywareBlocked              bool `json:"spywareBlocked"`
	SpywareCapture              bool `json:"spywareCapture"`
	RansomwareBlocked           bool `json:"ransomwareBlocked"`
	RansomwareCapture           bool `json:"ransomwareCapture"`
	RemoteAccessToolBlocked     bool `json:"remoteAccessToolBlocked"`
	RemoteAccessToolCapture     bool `json:"remoteAccessToolCapture"`
}

func GetATPMalwareInspection(ctx context.Context, service *zscaler.Service) (*ATPMalwareInspection, error) {
	var inspection ATPMalwareInspection
	err := service.Client.Read(ctx, atpMalwareInspectionEndpoint, &inspection)
	if err != nil {
		return nil, err
	}
	return &inspection, nil
}

func UpdateATPMalwareInspection(ctx context.Context, service *zscaler.Service, inspection ATPMalwareInspection) (*ATPMalwareInspection, *http.Response, error) {
	resp, err := service.Client.UpdateWithPut(ctx, atpMalwareInspectionEndpoint, inspection)
	if err != nil {
		return nil, nil, err
	}

	atpInspection, ok := resp.(*ATPMalwareInspection)
	if !ok {
		return nil, nil, fmt.Errorf("unexpected response type")
	}
	service.Client.GetLogger().Printf("[DEBUG] Updated ATP Malware inspection : %+v", atpInspection)
	return atpInspection, nil, nil
}

func GetATPMalwareProtocols(ctx context.Context, service *zscaler.Service) (*ATPMalwareProtocols, error) {
	var protocol ATPMalwareProtocols
	err := service.Client.Read(ctx, atpMalwareProtectionProtocolEndpoint, &protocol)
	if err != nil {
		return nil, err
	}
	return &protocol, nil
}

func UpdateATPMalwareProtocol(ctx context.Context, service *zscaler.Service, protocol ATPMalwareProtocols) (*ATPMalwareProtocols, *http.Response, error) {
	resp, err := service.Client.UpdateWithPut(ctx, atpMalwareProtectionProtocolEndpoint, protocol)
	if err != nil {
		return nil, nil, err
	}

	atpProtocol, ok := resp.(*ATPMalwareProtocols)
	if !ok {
		return nil, nil, fmt.Errorf("unexpected response type")
	}
	service.Client.GetLogger().Printf("[DEBUG] Updated ATP Malware protocol : %+v", atpProtocol)
	return atpProtocol, nil, nil
}

func GetATPMalwarePolicy(ctx context.Context, service *zscaler.Service) (*MalwarePolicy, error) {
	var policy MalwarePolicy
	err := service.Client.Read(ctx, malwarePolicyEndpoint, &policy)
	if err != nil {
		return nil, err
	}
	return &policy, nil
}

func UpdateATPMalwarePolicy(ctx context.Context, service *zscaler.Service, policy MalwarePolicy) (*MalwarePolicy, *http.Response, error) {
	resp, err := service.Client.UpdateWithPut(ctx, malwarePolicyEndpoint, policy)
	if err != nil {
		return nil, nil, err
	}

	malwarePolicy, ok := resp.(*MalwarePolicy)
	if !ok {
		return nil, nil, fmt.Errorf("unexpected response type")
	}
	service.Client.GetLogger().Printf("[DEBUG] Updated ATP Malware Policy : %+v", malwarePolicy)
	return malwarePolicy, nil, nil
}

func GetATPMalwareSettings(ctx context.Context, service *zscaler.Service) (*MalwareSettings, error) {
	var setting MalwareSettings
	err := service.Client.Read(ctx, malwareSettingsEndpoint, &setting)
	if err != nil {
		return nil, err
	}
	return &setting, nil
}

func UpdateATPMalwareSettings(ctx context.Context, service *zscaler.Service, setting MalwareSettings) (*MalwareSettings, *http.Response, error) {
	resp, err := service.Client.UpdateWithPut(ctx, malwareSettingsEndpoint, setting)
	if err != nil {
		return nil, nil, err
	}

	malwareSetting, ok := resp.(*MalwareSettings)
	if !ok {
		return nil, nil, fmt.Errorf("unexpected response type")
	}
	service.Client.GetLogger().Printf("[DEBUG] Updated ATP Malware Setting : %+v", malwareSetting)
	return malwareSetting, nil, nil
}
